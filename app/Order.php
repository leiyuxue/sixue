<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
    protected $fillable=['no','address','remark','closed','total_amount','refund_status','payment_no','payment_method','reviewed','refund_no','extra','paid_at','ship_status','ship_data'];

    protected $dates=['paid_at','created_at'];

    protected $casts=[
        'closed'=>'boolean',
        'reviewed'=>'boolean',
        'address'=>'json',
        'extra'=>'json',
        'ship_data'=>'json'
    ];
//    退款状态
    const REFUND_STATUS_PENDING='pending';
    const REFUND_STATUS_APPLIED='applied';
    const REFUND_STATUS_PROCESSING='processing';
    const REFUND_STATUS_SUCCESS='success';
    const REFUND_STATUS_FAILED='failed';

//    物流状态
    const SHIP_STATUS_PENDING='pending';
    const SHIP_STATUS_DELIVERED='delivered';
    const SHIP_STATUS_RECEIVED='received';

//    退款状态集合
    public static $refundStatusMap=[
        self::REFUND_STATUS_PENDING=>'未退款',
        self::REFUND_STATUS_APPLIED=>'已申请退款',
        self::REFUND_STATUS_PROCESSING=>'退款中',
        self::REFUND_STATUS_SUCCESS=>'退款成功',
        self::REFUND_STATUS_FAILED=>'退款失败',
    ];

//    物流状态集合
    public static $shipStatusMap=[
        self::SHIP_STATUS_PENDING=>'未发货',
        self::SHIP_STATUS_DELIVERED=>'已发货',
        self::SHIP_STATUS_RECEIVED=>'已收货'
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
//        监听模型事件，在入库之前触发
        static::creating(function($model){
//        如果no字段为空，生成
            if(!$model->no){
                $model->no=static::makeOrderNo();
//                如果创建失败，终止写入
                if(!$model->no){
                    return false;
                }
            }
        });
    }

    protected static function makeOrderNo(){
//        订单流水号前缀
        $orderPrefix=date('YmdHis');
//        循环生成10次，直到生成有效的为止
        for($i=0;$i<10;$i++){

            $no=$orderPrefix.str_pad(random_int(0,999999),6,'0',STR_PAD_LEFT);

            if(!static::query()->where('no',$no)->exists()){
                return $no;
            }
        }
        return false;
    }

    protected static function makeRefundNo(){
//        退单前缀
        $refundPrefix=date('YmdHis');
        for($i=0;$i<10;$i++){
            $refundNo=$refundPrefix.str_pad(random_int(0,99999999),8,'0',STR_PAD_LEFT);
             if(!static::query()->where('refund_no',$refundNo)->exists()){
                 return $refundNo;
             }
        }
        return false;

    }

//    关联用户
    public function user()
    {
        return $this->belongsTo(User::class);
    }
//    关联orderItem
    public function orderItems()
    {
        return $this->hasMany(OrderItem::class);
    }

//    关联优惠卷
    public function couponCode()
    {
        return $this->belongsTo(CouponCode::class);
    }
}
